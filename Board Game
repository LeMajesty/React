import React, { useState } from 'react';

function Board({ nrows, ncols, chanceLightStartsOn }) {
  const [board, setBoard] = useState(createBoard());
  const [hasWonGame, setHasWonGame] = useState(false);

  function createBoard() {
    let initialBoard = [];
    for (let i = 0; i < nrows; i++) {
      initialBoard.push([]);
      for (let j = 0; j < ncols; j++) {
        initialBoard[i][j] = Math.random() < chanceLightStartsOn;
      }
    }
    return initialBoard;
  }

  function hasWon() {
  
    return board.every(row => row.every(cell => !cell));
  }

  function flipCellsAround(coord) {
    setBoard(oldBoard => {
      const [y, x] = coord.split("-").map(Number);
      const boardCopy = oldBoard.map(row => [...row]);

      const flipCell = (y, x) => {
        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {
          boardCopy[y][x] = !boardCopy[y][x];
        }
      };

      // Flip the cell itself and the cells around it
      flipCell(y, x);           // The cell itself
      flipCell(y - 1, x);      // Above
      flipCell(y + 1, x);      // Below
      flipCell(y, x - 1);      // Left
      flipCell(y, x + 1);      // Right

      return boardCopy;
    });
  }

 
  if (hasWon()) {
    setHasWonGame(true);
  }

  return (
    <div>
      {hasWonGame ? (
        <h1>You Won!</h1>
      ) : (
        <table>
          <tbody>
            {board.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {row.map((cell, colIndex) => (
                  <td
                    key={`${rowIndex}-${colIndex}`}
                    style={{
                      backgroundColor: cell ? 'yellow' : 'black',
                      width: '40px',
                      height: '40px',
                      cursor: 'pointer'
                    }}
                    onClick={() => flipCellsAround(`${rowIndex}-${colIndex}`)}
                  />
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default Board;
